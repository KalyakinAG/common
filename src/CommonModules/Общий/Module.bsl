Функция Шаблон(СтрокаШаблона, П1 = Неопределено, П2 = Неопределено, П3 = Неопределено, П4 = Неопределено, П5 = Неопределено, П6 = Неопределено, П7 = Неопределено, П8 = Неопределено, П9 = Неопределено) Экспорт
	ЕстьПараметры = Ложь;
	Параметры = Новый Массив;
	ЕстьПараметры = ЕстьПараметры ИЛИ П1 <> Неопределено;	 
	Параметры.Добавить(П1);
	ЕстьПараметры = ЕстьПараметры ИЛИ П2 <> Неопределено;	 
	Параметры.Добавить(П2);
	ЕстьПараметры = ЕстьПараметры ИЛИ П3 <> Неопределено;	 
	Параметры.Добавить(П3);
	ЕстьПараметры = ЕстьПараметры ИЛИ П4 <> Неопределено;	 
	Параметры.Добавить(П4);
	ЕстьПараметры = ЕстьПараметры ИЛИ П5 <> Неопределено;	 
	Параметры.Добавить(П5);
	ЕстьПараметры = ЕстьПараметры ИЛИ П6 <> Неопределено;	 
	Параметры.Добавить(П6);
	ЕстьПараметры = ЕстьПараметры ИЛИ П7 <> Неопределено;	 
	Параметры.Добавить(П7);
	ЕстьПараметры = ЕстьПараметры ИЛИ П8 <> Неопределено;	 
	Параметры.Добавить(П8);
	ЕстьПараметры = ЕстьПараметры ИЛИ П9 <> Неопределено;	 
	Параметры.Добавить(П9);
	Если НЕ ЕстьПараметры Тогда
		Возврат СтрокаШаблона;
	КонецЕсли;
	Результат = СтрНайтиВсеПоРегулярномуВыражению(СтрокаШаблона, "\{[^{}]+?\}(?!\})");
	Состав = Новый Массив;
	Позиция = 1;
	Для Каждого ЭлементРезультата Из Результат Цикл
		ДлинаЧасти = ЭлементРезультата.НачальнаяПозиция - Позиция;
		ЧастьШаблона = Сред(СтрокаШаблона, Позиция, ДлинаЧасти);
		Состав.Добавить(ЧастьШаблона);
		Позиция = Позиция + ДлинаЧасти + ЭлементРезультата.Длина;
		П = Сред(ЭлементРезультата.Значение, 2, ЭлементРезультата.Длина - 2);
		Если ОбщегоНазначенияКлиентСервер.ЭтоЧисло(Лев(П, 1)) Тогда
			Индекс = Число(П) - 1;
			Значение = Параметры[Индекс];
		Иначе
			Значение = П1[П];
		КонецЕсли;
		Состав.Добавить(Значение);
	КонецЦикла;
	ДлинаШаблона = СтрДлина(СтрокаШаблона);
	Если Позиция <= ДлинаШаблона Тогда
		Состав.Добавить(Сред(СтрокаШаблона, Позиция, ДлинаШаблона - Позиция + 1));
	КонецЕсли;
	Возврат СтрСоединить(Состав, "");
КонецФункции

Функция МодельТекста(Текст = "") Экспорт
	МодельТекста = Обработки.МодельТекста.Создать();
	Если ЗначениеЗаполнено(Текст) Тогда
		Возврат МодельТекста.Добавить(Текст);
	КонецЕсли;
	Возврат МодельТекста;
КонецФункции

//МодельЗапроса = Общий.МодельЗапроса(ТекстЗапроса);
//МодельЗапроса = Общий.МодельЗапроса(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
//МодельЗапроса = Общий.МодельЗапроса(ДинамическийСписок);
Функция МодельЗапроса(ТекстЗапроса = Неопределено, НастройкиКомпоновки = Неопределено) Экспорт
	МодельЗапроса = Обработки.МодельЗапроса.Создать();
	Если ТекстЗапроса = Неопределено ИЛИ ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат МодельЗапроса;
	КонецЕсли;
	ТипЗначенияТекстаЗапроса = ТипЗнч(ТекстЗапроса);
	Если ТипЗначенияТекстаЗапроса = Тип("СхемаКомпоновкиДанных") Тогда
		Возврат МодельЗапроса.УстановитьСхемуКомпоновкиДанных(ТекстЗапроса, НастройкиКомпоновки);
	КонецЕсли;
	Если ТипЗначенияТекстаЗапроса = Тип("ТаблицаФормы") Тогда
		Возврат МодельЗапроса.УстановитьСхемуТаблицыСписка(ТекстЗапроса);
	КонецЕсли;
	Если ТипЗначенияТекстаЗапроса = Тип("ДинамическийСписок") Тогда
		Возврат МодельЗапроса.УстановитьСхемуДинамическогоСписка(ТекстЗапроса);
	КонецЕсли;
	Если ТипЗначенияТекстаЗапроса = Тип("Запрос") Тогда
		Возврат МодельЗапроса.УстановитьЗапрос(ТекстЗапроса);
	КонецЕсли;
	Если ТипЗначенияТекстаЗапроса = Тип("СхемаЗапроса") Тогда
		Если ТипЗнч(НастройкиКомпоновки) = Тип("МенеджерВременныхТаблиц") Тогда
			МодельЗапроса.УстановитьМенеджерВременныхТаблиц(НастройкиКомпоновки);
		КонецЕсли;
		Возврат МодельЗапроса.УстановитьСхемуЗапроса(ТекстЗапроса);
	КонецЕсли;
	Если ТипЗначенияТекстаЗапроса = Тип("МенеджерВременныхТаблиц") Тогда
		Возврат МодельЗапроса.УстановитьМенеджерВременныхТаблиц(ТекстЗапроса);
	КонецЕсли;
	МодельЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Возврат МодельЗапроса;
КонецФункции

//МодельЗапросаSQL = Общий.МодельЗапросаSQL();
Функция МодельЗапросаSQL() Экспорт
	МодельЗапросаSQL = Обработки.МодельЗапросаSQL.Создать();
	Возврат МодельЗапросаSQL;
КонецФункции

Функция МодельСхемыКомпоновкиДанных() Экспорт
	МодельСхемыКомпоновкиДанных = Обработки.МодельСхемыКомпоновкиДанных.Создать();
	Возврат МодельСхемыКомпоновкиДанных;
КонецФункции

Функция МодельНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных) Экспорт
	МодельНастройки = Обработки.МодельНастройкиКомпоновкиДанных.Создать();
	МодельНастройки.Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Возврат МодельНастройки;
КонецФункции

Функция МодельМакетаКомпоновкиДанных() Экспорт
	МодельМакета = Обработки.МодельМакетаКомпоновкиДанных.Создать();
	Возврат МодельМакета;
КонецФункции

Функция МодельМакетаОбластиКомпоновкиДанных(МакетОбласти = Неопределено) Экспорт
	МодельМакетаОбласти = Обработки.МодельМакетаОбластиКомпоновкиДанных.Создать();
	Если МакетОбласти <> Неопределено Тогда
		МодельМакетаОбласти.МакетОбласти = МакетОбласти;
	КонецЕсли;
	Возврат МодельМакетаОбласти;
КонецФункции

// Модель распределения.
// 
// Параметры:
//  Основание - МенеджерВременныхТаблиц - Основание
//  Точность - Число - Точность
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МодельРаспределения - Модель распределения
Функция МодельРаспределения(Основание = Неопределено, Точность = 2) Экспорт
	МодельРаспределения = Обработки.МодельРаспределения.Создать();
	Если ТипЗнч(Основание) = Тип("МенеджерВременныхТаблиц") Тогда
		МодельРаспределения.УстановитьМенеджерВременныхТаблиц(Основание);
	КонецЕсли;
	МодельРаспределения.Точность(Точность);
	Возврат МодельРаспределения;
КонецФункции

// Создает таблицу значений на основании информации о колонках.
// 
// Параметры:
// Колонки 	- Структура - {Имя, ОписаниеТипа}|{Имя, ТипЗнч(Значение)}
// 			- КоллекцияКолонокТаблицыЗначений, КоллекцияКолонокДереваЗначений, КоллекцияКолонокРезультатаЗапроса
// 			- Строка
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений
Функция ТаблицаЗначений(Колонки) Экспорт 
	Таблица 	= Новый ТаблицаЗначений;
	СоздатьКолонки(Таблица, Колонки);
	Возврат Таблица;
КонецФункции

Функция МодельСостояния(Контекст, МодульМодели = "Контекст", ПутьКДаннымОбъекта = "Объект") Экспорт
	Модель = Обработки.МодельСостояния.Создать();
	Модель.Контекст = Контекст;
	Модель.ПутьКДаннымОбъекта = ПутьКДаннымОбъекта;
	Модель.МодульМодели = МодульМодели;
	Модель.СоздатьХранилищеСостояния();
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		Если ЗначениеЗаполнено(ПутьКДаннымОбъекта) Тогда
			Модель.Объект = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Контекст, ПутьКДаннымОбъекта);
		Иначе
			Модель.Объект = Контекст;
		КонецЕсли;
		Модель.ДобавитьЭлементыФормы();
		Модель.УстановитьДействие(Контекст, "ПриЧтенииНаСервере", "ПриЧтенииВМоделиОбъектаНаСервере");
		Модель.УстановитьДействие(Контекст, "ПослеЗаписиНаСервере", "ПослеЗаписиВМоделиОбъектаНаСервере");
	Иначе
		Модель.Объект = Контекст;
	КонецЕсли;
	Возврат Модель;
КонецФункции

Функция ТипЗначенияИзСтроки(Знач ТипСтрокой) Экспорт
	ТипСтрокой = ВРег(ТипСтрокой);
	Если СтрНачинаетсяС(ТипСтрокой, "СТРОКА") Тогда
		ДлинаСтроки = СтрЗаменить(ТипСтрокой, "СТРОКА", "");
		ДлинаСтроки = СтрЗаменить(ДлинаСтроки, "(", "");
		ДлинаСтроки = СтрЗаменить(ДлинаСтроки, ")", "");
		Если НЕ ПустаяСтрока(ДлинаСтроки) Тогда
			ТипЗначения = ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаСтроки);
		Иначе
			ТипЗначения = Новый ОписаниеТипов(ТипСтрокой);							
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ТипСтрокой, "ЧИСЛО") Тогда
		ДлинаЧисла = СтрЗаменить(ТипСтрокой, "ЧИСЛО", "");
		ДлинаЧисла = СтрЗаменить(ДлинаЧисла, "(", "");
		ДлинаЧисла = СтрЗаменить(ДлинаЧисла, ")", "");
		Состав = СтрРазделить(ДлинаЧисла, ", ", Ложь);
		Если НЕ ЗначениеЗаполнено(ДлинаЧисла) Тогда
			ТипЗначения = Новый ОписаниеТипов(ТипСтрокой);
		ИначеЕсли Состав.Количество() = 1 Тогда
			ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(Состав[0]);
		Иначе
			ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(Состав[0], Состав[1]);
		КонецЕсли;
	Иначе
		ТипЗначения = Новый ОписаниеТипов(ТипСтрокой);// ДАТА, БУЛЕВО, НЕОПРЕДЕЛЕНО
	КонецЕсли;
	Возврат ТипЗначения;
КонецФункции

Функция МодельТаблицы() Экспорт
	Возврат Обработки.МодельТаблицы.Создать();
КонецФункции

Функция МодельОформления(УсловноеОформление = Неопределено) Экспорт
	МодельОформления =  Обработки.МодельОформления.Создать();
	Если УсловноеОформление = Неопределено Тогда
		Возврат МодельОформления;
	КонецЕсли;
	Возврат МодельОформления.Установить(УсловноеОформление);
КонецФункции

Процедура СоздатьКолонки(Коллекция, Колонки)
	ТипЗначения = ТипЗнч(Колонки);
	Если ТипЗначения = Тип("Строка") Тогда
		Для каждого Колонка Из ОбщийКлиентСервер.Массив(Колонки) Цикл
			Коллекция.Колонки.Добавить(Колонка);
		КонецЦикла;
	ИначеЕсли ТипЗначения = Тип("Массив") Тогда
		Если Тип(Колонки[0]) = Тип("Структура") Тогда
			Для каждого Колонка Из Колонки Цикл
				Коллекция.Колонки.Добавить(Колонка.Имя, ТипЗначенияИзСтроки(Колонка.ТипЗначения));
			КонецЦикла;
		Иначе
			Для каждого Колонка Из ОбщийКлиентСервер.Массив(Колонки) Цикл
				Коллекция.Колонки.Добавить(Колонка);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗначения = Тип("Структура") Тогда
		Для каждого Колонка Из Колонки Цикл
			ИмяКолонки 	= Колонка.Ключ;
			Значение 	= Колонка.Значение;
			Если Значение = Неопределено Тогда
				Коллекция.Колонки.Добавить(Колонка.Ключ);
			Иначе
				ТипЗначения = Колонка.Значение;
				Если ТипЗнч(ТипЗначения) = Тип("Строка") Тогда
					ТипЗначения = ТипЗначенияИзСтроки(ТипЗначения);
				ИначеЕсли ТипЗнч(ТипЗначения) <> Тип("ОписаниеТипов") Тогда
					ТипЗначения = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ТипЗначения)));
				КонецЕсли;
				Коллекция.Колонки.Добавить(Колонка.Ключ, ТипЗначения);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Колонки) = Тип("КоллекцияОбъектовМетаданных") Тогда
		Для каждого Колонка Из Колонки Цикл
			Коллекция.Колонки.Добавить(Колонка.Имя, Колонка.Тип);
		КонецЦикла;
	Иначе 
		Для каждого Колонка Из Колонки Цикл
			ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения,, "Null");
			Коллекция.Колонки.Добавить(Колонка.Имя, ТипЗначения);
		КонецЦикла;		
	КонецЕсли; 
КонецПроцедуры

Функция ТаблицаЗначенийВСтруктуру(Таблица, УпроститьТипы = Ложь) Экспорт
	СтруктураТаблицы = Новый Структура("Колонки, Строки", Новый Структура, Новый Массив);
	Колонки = СтруктураТаблицы.Колонки;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		ТипЗначения = Новый ОписаниеТипов(Колонка.ТипЗначения, , "Null");
		Если ТипЗначения.Типы().Количество() > 1 Тогда
			ТипКолонки = "НЕОПРЕДЕЛЕНО";
		Иначе
			Тип = ТипЗначения.Типы()[0];
			Если Тип = Тип("Строка") Тогда
				Если ТипЗначения.КвалификаторыСтроки.Длина = 0 Тогда
					ТипКолонки = СтрШаблон("СТРОКА");
				Иначе
					ТипКолонки = СтрШаблон("СТРОКА(%1)", Формат(ТипЗначения.КвалификаторыСтроки.Длина, "ЧГ="));
				КонецЕсли;
			ИначеЕсли Тип = Тип("Число") Тогда
				Разрядность = ТипЗначения.КвалификаторыЧисла.Разрядность;
				РазрядностьДробнойЧасти = ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
				Если Разрядность = 0 Тогда
					ТипКолонки = СтрШаблон("ЧИСЛО");
				ИначеЕсли РазрядностьДробнойЧасти = 0 Тогда
					ТипКолонки = СтрШаблон("ЧИСЛО(%1)", Формат(Разрядность, "ЧГ="));
				Иначе
					ТипКолонки = СтрШаблон("ЧИСЛО(%1, %2)", Формат(Разрядность, "ЧГ="), Формат(РазрядностьДробнойЧасти, "ЧГ="));
				КонецЕсли;
			Иначе
				ТипКолонки = ОбщегоНазначения.СтроковоеПредставлениеТипа(Тип);
			КонецЕсли;
		КонецЕсли;
		Колонки.Вставить(Колонка.Имя, ТипКолонки);
	КонецЦикла;
	Строки = СтруктураТаблицы.Строки;
	Для Каждого Строка Из Таблица Цикл
		Значения = Новый Массив;
		Для Каждого Колонка Из Колонки Цикл
			Значение = Строка[Колонка.Ключ];
			Если УпроститьТипы И НЕ ЭтоПростойТип(ТипЗнч(Значение)) Тогда
				Значения.Добавить(XMLСтрока(Значение));
			Иначе
				Значения.Добавить(Значение);
			КонецЕсли;
		КонецЦикла;
		Строки.Добавить(Значения);
	КонецЦикла;
	Возврат СтруктураТаблицы;
КонецФункции

Функция СтруктураВТаблицуЗначений(ТаблицаJSON, НайтиСсылку = Ложь) Экспорт
	Если ТипЗнч(ТаблицаJSON) = Тип("Строка") Тогда
		Возврат СтруктураВТаблицуЗначений(ОбщийКлиентСервер.JSONВОбъект(ТаблицаJSON));
	КонецЕсли;
	Таблица = ТаблицаЗначений(ТаблицаJSON.Колонки);
	Колонки = Таблица.Колонки;
	Для Каждого ДанныеСтроки Из ТаблицаJSON.Строки Цикл
		Строка = Таблица.Добавить();
		Для ИндексКолонки = 0 По ДанныеСтроки.ВГраница() Цикл
			ТипЗначения = Колонки[ИндексКолонки].ТипЗначения;
			Если ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				Строка[ИндексКолонки] = ПрочитатьДатуJSON(ДанныеСтроки[ИндексКолонки], ФорматДатыJSON.ISO);
				Продолжить;
			КонецЕсли;
			Если НайтиСсылку И ОбщегоНазначения.ЭтоСсылка(ТипЗначения.Типы()[0]) Тогда
				Значение = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Новый(ТипЗначения.Типы()[0])).ПолучитьСсылку(Новый УникальныйИдентификатор(ДанныеСтроки[ИндексКолонки]));
				Строка[ИндексКолонки] = Значение;
				Продолжить;
			КонецЕсли;
			Строка[ИндексКолонки] = ДанныеСтроки[ИндексКолонки];
		КонецЦикла;
	КонецЦикла;
	Возврат Таблица;
КонецФункции
