Функция Шаблон(СтрокаШаблона, П1 = Неопределено, П2 = Неопределено, П3 = Неопределено, П4 = Неопределено, П5 = Неопределено, П6 = Неопределено, П7 = Неопределено, П8 = Неопределено, П9 = Неопределено) Экспорт
	Если ТипЗнч(П1) = Тип("Массив") Тогда
		Параметры = П1;
		ЕстьПараметры = Параметры.ВГраница() <> -1;
	Иначе
		Параметры = Новый Массив;
		ЕстьПараметры = П1 <> Неопределено;
		Параметры.Добавить(П1);
		ЕстьПараметры = ЕстьПараметры ИЛИ П2 <> Неопределено;
		Параметры.Добавить(П2);
		ЕстьПараметры = ЕстьПараметры ИЛИ П3 <> Неопределено;
		Параметры.Добавить(П3);
		ЕстьПараметры = ЕстьПараметры ИЛИ П4 <> Неопределено;
		Параметры.Добавить(П4);
		ЕстьПараметры = ЕстьПараметры ИЛИ П5 <> Неопределено;
		Параметры.Добавить(П5);
		ЕстьПараметры = ЕстьПараметры ИЛИ П6 <> Неопределено;
		Параметры.Добавить(П6);
		ЕстьПараметры = ЕстьПараметры ИЛИ П7 <> Неопределено;
		Параметры.Добавить(П7);
		ЕстьПараметры = ЕстьПараметры ИЛИ П8 <> Неопределено;
		Параметры.Добавить(П8);
		ЕстьПараметры = ЕстьПараметры ИЛИ П9 <> Неопределено;
		Параметры.Добавить(П9);
	КонецЕсли;
	Если НЕ ЕстьПараметры Тогда
		Возврат СтрокаШаблона;
	КонецЕсли;
	Результат = СтрНайтиВсеПоРегулярномуВыражению(СтрокаШаблона, "\{[^{}]+?\}(?!\})");
	Состав = Новый Массив;
	Позиция = 1;
	Для Каждого ЭлементРезультата Из Результат Цикл
		ДлинаЧасти = ЭлементРезультата.НачальнаяПозиция - Позиция;
		ЧастьШаблона = Сред(СтрокаШаблона, Позиция, ДлинаЧасти);
		Состав.Добавить(ЧастьШаблона);
		Позиция = Позиция + ДлинаЧасти + ЭлементРезультата.Длина;
		П = Сред(ЭлементРезультата.Значение, 2, ЭлементРезультата.Длина - 2);
		Если ОбщегоНазначенияКлиентСервер.ЭтоЧисло(Лев(П, 1)) Тогда
			Индекс = Число(П) - 1;
			Значение = Параметры[Индекс];
		Иначе
			Значение = П1[П];
		КонецЕсли;
		Состав.Добавить(Значение);
	КонецЦикла;
	ДлинаШаблона = СтрДлина(СтрокаШаблона);
	Если Позиция <= ДлинаШаблона Тогда
		Состав.Добавить(Сред(СтрокаШаблона, Позиция, ДлинаШаблона - Позиция + 1));
	КонецЕсли;
	Возврат СтрСоединить(Состав, "");
КонецФункции

Функция МодельТекста(Текст = "") Экспорт
	МодельТекста = Обработки.МодельТекста.Создать();
	Если ЗначениеЗаполнено(Текст) Тогда
		Возврат МодельТекста.Добавить(Текст);
	КонецЕсли;
	Возврат МодельТекста;
КонецФункции

//МодельЗапроса = Общий.МодельЗапроса(ТекстЗапроса);
//МодельЗапроса = Общий.МодельЗапроса(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных);
//МодельЗапроса = Общий.МодельЗапроса(ДинамическийСписок);
Функция МодельЗапроса(ТекстЗапроса = Неопределено, НастройкиКомпоновки = Неопределено) Экспорт
	МодельЗапроса = Обработки.МодельЗапроса.Создать();
	Если ТекстЗапроса = Неопределено ИЛИ ПустаяСтрока(ТекстЗапроса) Тогда
		Возврат МодельЗапроса;
	КонецЕсли;
	ТипЗначенияТекстаЗапроса = ТипЗнч(ТекстЗапроса);
	Если ТипЗначенияТекстаЗапроса = Тип("СхемаКомпоновкиДанных") Тогда
		Возврат МодельЗапроса.УстановитьСхемуКомпоновкиДанных(ТекстЗапроса, НастройкиКомпоновки);
	КонецЕсли;
	Если ТипЗначенияТекстаЗапроса = Тип("ТаблицаФормы") Тогда
		Возврат МодельЗапроса.УстановитьСхемуТаблицыСписка(ТекстЗапроса);
	КонецЕсли;
	Если ТипЗначенияТекстаЗапроса = Тип("ДинамическийСписок") Тогда
		Возврат МодельЗапроса.УстановитьСхемуДинамическогоСписка(ТекстЗапроса);
	КонецЕсли;
	Если ТипЗначенияТекстаЗапроса = Тип("Запрос") Тогда
		Возврат МодельЗапроса.УстановитьЗапрос(ТекстЗапроса);
	КонецЕсли;
	Если ТипЗначенияТекстаЗапроса = Тип("СхемаЗапроса") Тогда
		Если ТипЗнч(НастройкиКомпоновки) = Тип("МенеджерВременныхТаблиц") Тогда
			МодельЗапроса.УстановитьМенеджерВременныхТаблиц(НастройкиКомпоновки);
		КонецЕсли;
		Возврат МодельЗапроса.УстановитьСхемуЗапроса(ТекстЗапроса);
	КонецЕсли;
	Если ТипЗначенияТекстаЗапроса = Тип("МенеджерВременныхТаблиц") Тогда
		Возврат МодельЗапроса.УстановитьМенеджерВременныхТаблиц(ТекстЗапроса);
	КонецЕсли;
	МодельЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Возврат МодельЗапроса;
КонецФункции

//МодельЗапросаSQL = Общий.МодельЗапросаSQL();
Функция МодельЗапросаSQL() Экспорт
	МодельЗапросаSQL = Обработки.МодельЗапросаSQL.Создать();
	Возврат МодельЗапросаSQL;
КонецФункции

Функция МодельСхемыКомпоновкиДанных(Коллекция = Неопределено) Экспорт
	МодельСхемыКомпоновки = Обработки.МодельСхемыКомпоновкиДанных.Создать();
	Если Коллекция = Неопределено Тогда
		Возврат МодельСхемыКомпоновки;
	КонецЕсли;
	Если ТипЗнч(Коллекция) = Тип("ДеревоЗначений") Тогда
		РаботаСКоллекцией.ДобавитьКолонкиИерархии(Коллекция);
		Таблица = РаботаСКоллекцией.ДеревоВТаблицуЗначений(Коллекция);
		НужнаИерархия = Истина;
	ИначеЕсли ТипЗнч(Коллекция) = Тип("ТаблицаЗначений") Тогда
		Таблица = Коллекция;
		НужнаИерархия = Ложь;
	Иначе
		ВызватьИсключение "Неизвестный тип коллекции " + ТипЗнч(Коллекция);
	КонецЕсли;
	//  Формирование модели отчета по таблице
	МодельСхемыКомпоновки
		.НаборДанныхОбъект(Таблица, "НаборДанных")
			.Реквизиты()
	;
	Для Каждого Колонка Из Таблица.Колонки Цикл
		МодельСхемыКомпоновки
			.Поле(Колонка.Имя)
		;	
	КонецЦикла;
	Если НужнаИерархия Тогда
		//  Иерархия через рекурсивное замыкание
		МодельСхемыКомпоновки
			.ВнутреннееСоединение("НаборДанных", "НаборДанных")
				.Связь("Идентификатор = ИдентификаторРодителя")
				.НачальноеВыражение("0")
		;
	КонецЕсли;
	Возврат МодельСхемыКомпоновки;
КонецФункции

Функция МодельНастройкиКомпоновкиДанных(НастройкиКомпоновки) Экспорт
	МодельНастройкиКомпоновки = Обработки.МодельНастройкиКомпоновкиДанных.Создать();
	ТипЗначения = ТипЗнч(НастройкиКомпоновки);
	Если ТипЗначения = Тип("СхемаКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновки.НастройкиПоУмолчанию;
	ИначеЕсли ТипЗначения = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновки;
	Иначе
		ВызватьИсключение "Неизвестный тип настройки компоновки данных " + ТипЗначения;
	КонецЕсли;
	МодельНастройкиКомпоновки.Настройки = Настройки;
	Возврат МодельНастройкиКомпоновки;
КонецФункции

Функция МодельМакетаКомпоновкиДанных(Коллекция = Неопределено) Экспорт
	МодельМакетаКомпоновки = Обработки.МодельМакетаКомпоновкиДанных.Создать();
	Если Коллекция = Неопределено Тогда
		Возврат МодельМакетаКомпоновки;
	КонецЕсли;
	МодельСхемыКомпоновки = МодельСхемыКомпоновкиДанных(Коллекция);
	МодельНастройкиКомпоновки = МодельНастройкиКомпоновкиДанных(МодельСхемыКомпоновки.НастройкиПоУмолчанию())
	;
	Для Каждого Колонка Из Коллекция.Колонки Цикл
		МодельНастройкиКомпоновки
			.Поле(Колонка.Имя)
		;	
	КонецЦикла;
	//  Описание структуры
	МодельНастройкиКомпоновки
		.Структура()
			.ГруппировкаНачать()
				.ПолеГруппировки("*")
				.Поле("*")
			.ГруппировкаЗавершить()
	;
	//  Компоновка
	МодельМакетаКомпоновки
		.Схема(МодельСхемыКомпоновки.СхемаКомпоновкиДанных)
		.Настройки(МодельНастройкиКомпоновки.Настройки)
		.ВнешниеНаборыДанных(МодельСхемыКомпоновки.ВнешниеНаборыДанных)
	;
	Возврат МодельМакетаКомпоновки;
КонецФункции

Функция МодельМакетаОбластиКомпоновкиДанных(МакетОбласти = Неопределено) Экспорт
	МодельМакетаОбласти = Обработки.МодельМакетаОбластиКомпоновкиДанных.Создать();
	Если МакетОбласти <> Неопределено Тогда
		МодельМакетаОбласти.МакетОбласти = МакетОбласти;
	КонецЕсли;
	Возврат МодельМакетаОбласти;
КонецФункции

// Модель распределения.
// 
// Параметры:
//  Основание - МенеджерВременныхТаблиц - Основание
//  Точность - Число - Точность
// 
// Возвращаемое значение:
//  ОбработкаОбъект.МодельРаспределения - Модель распределения
Функция МодельРаспределения(Основание = Неопределено, Точность = 2) Экспорт
	МодельРаспределения = Обработки.МодельРаспределения.Создать();
	Если ТипЗнч(Основание) = Тип("МенеджерВременныхТаблиц") Тогда
		МодельРаспределения.УстановитьМенеджерВременныхТаблиц(Основание);
	КонецЕсли;
	МодельРаспределения.Точность(Точность);
	Возврат МодельРаспределения;
КонецФункции

Функция МодельСостояния(Контекст, МодульМодели = "Контекст", ПутьКДаннымОбъекта = "Объект") Экспорт
	Модель = Обработки.МодельСостояния.Создать();
	Модель.Контекст = Контекст;
	Модель.ПутьКДаннымОбъекта = ПутьКДаннымОбъекта;
	Модель.МодульМодели = МодульМодели;
	Модель.СоздатьХранилищеСостояния();
	Если ТипЗнч(Контекст) = Тип("ФормаКлиентскогоПриложения") Тогда
		Если ЗначениеЗаполнено(ПутьКДаннымОбъекта) Тогда
			Модель.Объект = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Контекст, ПутьКДаннымОбъекта);
		Иначе
			Модель.Объект = Контекст;
		КонецЕсли;
		Модель.ДобавитьЭлементыФормы();
		Модель.УстановитьДействие(Контекст, "ПриЧтенииНаСервере", "ПриЧтенииВМоделиОбъектаНаСервере");
		Модель.УстановитьДействие(Контекст, "ПослеЗаписиНаСервере", "ПослеЗаписиВМоделиОбъектаНаСервере");
	Иначе
		Модель.Объект = Контекст;
	КонецЕсли;
	Возврат Модель;
КонецФункции

Функция ТипЗначенияИзСтроки(Знач ТипСтрокой) Экспорт
	ТипСтрокой = ВРег(ТипСтрокой);
	Если СтрНачинаетсяС(ТипСтрокой, "СТРОКА") Тогда
		ДлинаСтроки = СтрЗаменить(ТипСтрокой, "СТРОКА", "");
		ДлинаСтроки = СтрЗаменить(ДлинаСтроки, "(", "");
		ДлинаСтроки = СтрЗаменить(ДлинаСтроки, ")", "");
		Если НЕ ПустаяСтрока(ДлинаСтроки) Тогда
			ТипЗначения = ОбщегоНазначения.ОписаниеТипаСтрока(ДлинаСтроки);
		Иначе
			ТипЗначения = Новый ОписаниеТипов(ТипСтрокой);							
		КонецЕсли;
	ИначеЕсли СтрНачинаетсяС(ТипСтрокой, "ЧИСЛО") Тогда
		ДлинаЧисла = СтрЗаменить(ТипСтрокой, "ЧИСЛО", "");
		ДлинаЧисла = СтрЗаменить(ДлинаЧисла, "(", "");
		ДлинаЧисла = СтрЗаменить(ДлинаЧисла, ")", "");
		Состав = СтрРазделить(ДлинаЧисла, ", ", Ложь);
		Если НЕ ЗначениеЗаполнено(ДлинаЧисла) Тогда
			ТипЗначения = Новый ОписаниеТипов(ТипСтрокой);
		ИначеЕсли Состав.Количество() = 1 Тогда
			ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(Состав[0]);
		Иначе
			ТипЗначения = ОбщегоНазначения.ОписаниеТипаЧисло(Состав[0], Состав[1]);
		КонецЕсли;
	Иначе
		ТипЗначения = Новый ОписаниеТипов(ТипСтрокой);// ДАТА, БУЛЕВО, НЕОПРЕДЕЛЕНО
	КонецЕсли;
	Возврат ТипЗначения;
КонецФункции

// Устарела. Использовать РаботаСКоллекцией.ТаблицаЗначений
Функция ТаблицаЗначений(Колонки) Экспорт 
	Возврат РаботаСКоллекцией.ТаблицаЗначений(Колонки);
КонецФункции

// Устарела. Использовать РаботаСКоллекцией.ТаблицаЗначенийВСтруктуру
Функция ТаблицаЗначенийВСтруктуру(Таблица, ПривестиСсылкуКСтроке = Ложь) Экспорт
	Возврат РаботаСКоллекцией.ТаблицаЗначенийВСтруктуру(Таблица, ПривестиСсылкуКСтроке);
КонецФункции

// Устарела. Использовать РаботаСКоллекцией.СтруктураВТаблицуЗначений
Функция СтруктураВТаблицуЗначений(ТаблицаJSON, НайтиСсылкуИзСтроки = Ложь) Экспорт
	Возврат РаботаСКоллекцией.СтруктураВТаблицуЗначений(ТаблицаJSON, НайтиСсылкуИзСтроки = Ложь);
КонецФункции

Функция МодельТаблицы() Экспорт
	Возврат Обработки.МодельТаблицы.Создать();
КонецФункции

Функция МодельОформления(УсловноеОформление = Неопределено, Очистить = Истина) Экспорт
	МодельОформления = Обработки.МодельОформления.Создать();
	Если УсловноеОформление = Неопределено Тогда
		Возврат МодельОформления;
	КонецЕсли;
	Возврат МодельОформления.Установить(УсловноеОформление, Очистить);
КонецФункции

// Возвращает описание типа, включающего в себя все возможные ссылочные типы конфигурации.
//
// Возвращаемое значение:
//  ОписаниеТипов - все ссылочные типы конфигурации.
//
Функция ОписаниеПростыеТипы() Экспорт
	Возврат Новый ОписаниеТипов("Булево, Число, Строка, Дата");
КонецФункции

Функция ЭтоПростойТип(ПроверяемыйТип) Экспорт
	Возврат ПроверяемыйТип <> Тип("Неопределено") И ОписаниеПростыеТипы().СодержитТип(ПроверяемыйТип);
КонецФункции
